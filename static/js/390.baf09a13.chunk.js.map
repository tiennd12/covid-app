{"version":3,"file":"static/js/390.baf09a13.chunk.js","mappings":"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","sources":["views/utilities/RequestChange.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport axios from \"axios\";\r\nimport { addDoc, setDoc, onSnapshot, doc } from \"@firebase/firestore\";\r\nimport { dataRef, requestRef } from \"../../firebase/firebase\";\r\nimport {\r\n    auth,\r\n    queryGetUserInfoByPhone,\r\n    db,\r\n    queryGetUserInfoByEmail,\r\n} from \"../../firebase/firebase\";\r\nimport { onAuthStateChanged } from \"firebase/auth\";\r\nimport { Container, Typography, Stack, Card, CardContent, Grid, TextField, Button, Select, MenuItem, InputLabel, FormControl, CardActions } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nconst RequestChange = () => {\r\n    const useStyles = makeStyles((theme) => ({\r\n        header: {\r\n            marginBottom: '30px',\r\n            textTransform: 'uppercase',\r\n        },\r\n        textField: {\r\n            marginBottom: '38px',\r\n        },\r\n        error: {\r\n            color: 'red',\r\n            paddingBottom: '10px'\r\n        },\r\n        button: {\r\n            justifyContent: 'flex-end',\r\n            padding: '0 24px 24px 24px'\r\n        }\r\n    }));\r\n    const classes = useStyles();\r\n    const navigate = useNavigate();\r\n\r\n    const [userEmail, setUserEmail] = useState(\"\");\r\n    const [phone, setPhone] = useState(\"\");\r\n\r\n    const [fetchData, setFetchData] = useState([]);\r\n    const [inputCity, setInputCity] = useState(\"\");\r\n\r\n    const [district, setDistrict] = useState([]);\r\n    const [inputDistrict, setInputDistrict] = useState(\"\");\r\n\r\n    const [ward, setWard] = useState([]);\r\n    const [inputWard, setInputWard] = useState(\"\");\r\n\r\n    //UseForm\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    //handlers\r\n\r\n    const cityHandler = (e) => {\r\n        setInputCity(e.target.value);\r\n        setInputDistrict(\"\");\r\n        setInputWard(\"\");\r\n    };\r\n\r\n    const districtHandler = (e) => {\r\n        setInputDistrict(e.target.value);\r\n        setInputWard(\"\");\r\n    };\r\n\r\n    const fetchDistrict = async () => {\r\n        const { data } = await axios.get(\r\n            `https://provinces.open-api.vn/api/p/${inputCity}?depth=2`\r\n        );\r\n        return setDistrict(data);\r\n    };\r\n\r\n    const fetchWard = async () => {\r\n        if (inputDistrict) {\r\n            const { data } = await axios.get(\r\n                `https://provinces.open-api.vn/api/d/${inputDistrict}?depth=2`\r\n            );\r\n            return setWard(data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        onAuthStateChanged(auth, (currentUser) => {\r\n            if (currentUser) {\r\n                setUserEmail(currentUser.email);\r\n                onSnapshot(queryGetUserInfoByEmail(userEmail), (snapshot) => {\r\n                    snapshot.forEach((data) => setPhone(data.data().phone));\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n        axios.get(\"https://provinces.open-api.vn/api/?depth=1\").then((result) => {\r\n            const { data } = result;\r\n\r\n            setFetchData(data);\r\n        });\r\n        fetchDistrict();\r\n        fetchWard();\r\n    }, [inputCity, inputDistrict]);\r\n\r\n\r\n\r\n    return (\r\n        <Container className=\"container requestChange\">\r\n            <Card sx={{ textAlign: 'center' }}>\r\n                <form\r\n                    className=\"request-form\"\r\n                    onSubmit={handleSubmit((data) => {\r\n                        if (district && ward) {\r\n                            const updateData = addDoc(requestRef, {\r\n                                city: district.name,\r\n                                district: ward.name,\r\n                                ward: inputWard,\r\n                                name: data.inputName,\r\n                                phoneToChange: data.inputPhone,\r\n                                phone: phone,\r\n                                dob: data.dob,\r\n                                address: data.inputAddress,\r\n                                reason: data.inputReason,\r\n                            });\r\n\r\n                            if (updateData) {\r\n                                window.alert(\r\n                                    \"Gửi thông tin thành công, vui lòng đợi thông tin được phê duyệt\"\r\n                                );\r\n                                navigate(\"/\");\r\n                            }\r\n                        }\r\n                    })}\r\n                >\r\n                    <CardContent>\r\n                        <Typography variant=\"h3\" className={classes.header} gutterBottom >Điền thông tin cần  thay đổi</Typography>\r\n                        <Grid\r\n                            container\r\n                            spacing={4}\r\n                        >\r\n                            <Grid item sm={6}>\r\n                                <FormControl fullWidth>\r\n                                    <Typography className={classes.error}> {errors.inputName?.message}</Typography>\r\n                                    <TextField\r\n                                        className={classes.textField}\r\n                                        label=\"Họ và tên:\"\r\n                                        {...register(\"inputName\", { required: \"Không được để trống\" })}\r\n                                    />\r\n                                </FormControl>\r\n\r\n                                <FormControl fullWidth>\r\n                                    <Typography> {errors.inputPhone?.message}</Typography>\r\n                                    <TextField\r\n                                        className={classes.textField}\r\n                                        label=\"Số điện thoại\"\r\n                                        {...register(\r\n                                            \"inputPhone\",\r\n                                            {\r\n                                                pattern: {\r\n                                                    value: /(84|0[3|5|7|8|9])+([0-9]{8})\\b/,\r\n                                                    message: \"Nhập đúng định dạng số điện thoại\",\r\n                                                }\r\n                                            }\r\n\r\n                                        )}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormControl fullWidth>\r\n                                    <Typography className={classes.error}> {errors.dob?.message}</Typography>\r\n                                    <TextField\r\n                                        className={classes.textField}\r\n                                        type=\"date\"\r\n                                        {...register(\"dob\", { required: \"Không được để trống\" })}\r\n                                    />\r\n\r\n                                </FormControl>\r\n                                <FormControl fullWidth >\r\n                                    <InputLabel>Chọn thành phố</InputLabel>\r\n                                    <Select\r\n                                        className={classes.textField}\r\n                                        onChange={cityHandler}\r\n                                        value={inputCity}\r\n                                    >\r\n                                        <MenuItem value=\"\" disabled>\r\n                                            Chọn thành phố\r\n                                        </MenuItem>\r\n                                        {fetchData &&\r\n                                            fetchData.map((val) => (\r\n                                                <MenuItem key={val.code} value={val.code}>\r\n                                                    {val.name}\r\n                                                </MenuItem>\r\n                                            ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item sm={6}>\r\n                                <FormControl fullWidth>\r\n                                    <InputLabel htmlFor=\"district\">Quận/Huyện</InputLabel>\r\n                                    <Select\r\n                                        className={classes.textField}\r\n                                        onChange={districtHandler}\r\n                                        value={inputDistrict}\r\n                                        label=\"Chọn quận huyện\"\r\n                                    >\r\n                                        <MenuItem value=\"\" disabled>\r\n                                            Chọn quận huyện\r\n                                        </MenuItem>\r\n                                        {district.districts &&\r\n                                            district.districts.map((val) => (\r\n                                                <MenuItem key={val.code} value={val.code}>\r\n                                                    {val.name}\r\n                                                </MenuItem>\r\n                                            ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <FormControl fullWidth>\r\n                                    <InputLabel htmlFor=\"ward\">Phường/Xã</InputLabel>\r\n                                    <Select\r\n                                        className={classes.textField}\r\n                                        onChange={(event) => setInputWard(event.target.value)}\r\n                                        value={inputWard}\r\n                                    >\r\n                                        <MenuItem value=\"\" disabled>\r\n                                            Chọn phường xã\r\n                                        </MenuItem>\r\n                                        {ward.wards &&\r\n                                            ward.wards.map((val) => (\r\n                                                <MenuItem key={val.code} value={val.name}>\r\n                                                    {val.name}\r\n                                                </MenuItem>\r\n                                            ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <FormControl fullWidth>\r\n                                    <Typography className={classes.error} > {errors.inputAddress?.message}</Typography>\r\n                                    <TextField\r\n                                        className={classes.textField}\r\n                                        label=\"Địa chỉ\"\r\n                                        {...register(\"inputAddress\", { required: \"Không được để trống\" })}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormControl fullWidth>\r\n                                    <Typography className={classes.error} > {errors.inputReason?.message}</Typography>\r\n                                    <TextField\r\n                                        className={classes.textField}\r\n                                        multiline\r\n                                        label=\"Lý do thay đổi\"\r\n                                        {...register(\"inputReason\", { required: \"Không được để trống\" })}\r\n                                    />\r\n                                </FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </CardContent>\r\n                    <CardActions className={classes.button} >\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"error\" size=\"large\">Gửi yêu cầu</Button>\r\n                    </CardActions>\r\n                </form>\r\n            </Card>\r\n        </Container >\r\n    );\r\n};\r\n\r\nexport default RequestChange;\r\n"],"names":["classes","makeStyles","theme","header","marginBottom","textTransform","textField","error","color","paddingBottom","button","justifyContent","padding","useStyles","navigate","useNavigate","userEmail","setUserEmail","useState","phone","setPhone","fetchData","setFetchData","inputCity","setInputCity","district","setDistrict","inputDistrict","setInputDistrict","ward","setWard","inputWard","setInputWard","register","handleSubmit","formState","errors","useForm","useEffect","onAuthStateChanged","auth","currentUser","email","onSnapshot","queryGetUserInfoByEmail","snapshot","forEach","data","axios","then","result","async","fetchDistrict","fetchWard","className","sx","textAlign","onSubmit","addDoc","requestRef","city","name","inputName","phoneToChange","inputPhone","dob","address","inputAddress","reason","inputReason","window","alert","variant","gutterBottom","container","spacing","item","sm","fullWidth","message","label","required","pattern","value","type","onChange","e","target","disabled","map","val","code","htmlFor","districts","event","wards","multiline","size"],"sourceRoot":""}